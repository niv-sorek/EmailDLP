
"""
    AC - Attack Complexity
    UI - User Interaction
    AV - Attack Vector -The value will be larger the farther (logically, and physically) an attacker can be in order to exploit the vulnerable component.
    E - Exploit Code Maturity - Measures the likelihood of the vulnerability being attacked, and is typically based on the current state of exploit techniques, exploit code availability, or active, “in-the-wild” exploitation
    RL - Remediation Level 
    PR - Privileges Required - Describes the level of privileges an attacker must possess before successfully exploiting the vulnerability
"""
metrics = {'AC': {'L': 0.77, 'H': 0.44},
           'UI': {'N': 0.85, 'R': 0.65},
           'AV': {'N': 0.85, 'A': 0.62, 'L': 0.55, 'P': 0.2},
           'E': {'N': 1, 'H': 1, 'F': 0.97, 'P': 0.94, 'U': 0.91},
           'RL': {'N': 1, 'U': 1, 'W': 0.97, 'T': 0.96, 'O': 0.95}}

class Vulnerability:
    def __init__(self, cve, fix, num_of_exploits, E, AC, AV, RL, UI, PR):
        self.fix = fix
        self.cve = cve
        self.number_of_exploit = num_of_exploits
        self.AC = metrics['AC'][AC]
        self.UI = metrics['UI'][UI]
        self.AV = metrics['AV'][AV]
        self.RL = metrics['RL'][RL]
        self.E = metrics['E'][E]
        self.PR = PR
        self.vulnerability_level = self.calculate_venerability_level()

    def calculate_venerability_level(self):
        vulnerability_level = 10 * AC * UI * AV * RL * E
        return vulnerability_level

    def reprJSON(self):
        return dict(fix=self.fix,
                    cve=self.cve,
                    exploits=self.number_of_exploit,
                    cvss=self.cvss_level,
                    level=self.vulnerability_level)

    def __str__(self):
        return self.cve + " exploits: " + str(self.number_of_exploit) + " " + str(
            self.fix) + " cvss: " + str(self.cvss_level) + " level: " + str(
            self.vulnerability_level)
